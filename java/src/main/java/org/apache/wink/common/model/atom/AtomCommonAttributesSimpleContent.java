/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *  
 *   http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *  
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.09.08 at 01:26:02 PM IDT 
//

package org.apache.wink.common.model.atom;

import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.namespace.QName;

import org.apache.wink.common.model.synd.SyndSimpleContent;

/**
 * Common attributes Per RFC4287
 * 
 * <pre>
 * Any element defined by this specification MAY have an xml:base attribute
 * [W3C.REC-xmlbase-20010627]. When xml:base is used in an Atom Document, it serves the function
 * described in section 5.1.1 of [RFC3986], establishing the base URI (or IRI) for resolving any
 * relative references found within the effective scope of the xml:base attribute.
 * 
 * Any element defined by this specification MAY have an xml:lang attribute, whose content indicates
 * the natural language for the element and its descendents. The language context is only
 * significant for elements and attributes declared to be &quot;Language- Sensitive&quot; by this
 * specification. Requirements regarding the content and interpretation of xml:lang are specified in
 * XML 1.0 [W3C.REC-xml-20040204], Section 2.12.
 * 
 *  atomCommonAttributes =
 *     attribute xml:base { atomUri }?,
 *     attribute xml:lang { atomLanguageTag }?,
 *     undefinedAttribute*
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "atomCommonAttributesSimpleContent", propOrder = {"value"})
@XmlSeeAlso( {AtomGenerator.class})
public class AtomCommonAttributesSimpleContent {

    @XmlValue
    protected String           value;
    @XmlAttribute(namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlSchemaType(name = "anyURI")
    protected String           base;
    @XmlAttribute(namespace = "http://www.w3.org/XML/1998/namespace")
    protected String           lang;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes;

    public AtomCommonAttributesSimpleContent() {
    }

    public AtomCommonAttributesSimpleContent(SyndSimpleContent value) {
        if (value == null) {
            return;
        }
        setBase(value.getBase());
        setLang(value.getLang());
        setValue(value.getValue());
    }

    protected SyndSimpleContent toSynd(SyndSimpleContent value) {
        if (value == null) {
            return value;
        }
        value.setBase(getBase());
        value.setLang(getLang());
        value.setValue(getValue());
        return value;
    }

    /**
     * Gets the value of value.
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of value.
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of base.
     */
    public String getBase() {
        return base;
    }

    /**
     * Sets the value of base.
     */
    public void setBase(String value) {
        this.base = value;
    }

    /**
     * Gets the value of lang.
     */
    public String getLang() {
        return lang;
    }

    /**
     * Sets the value of lang.
     */
    public void setLang(String value) {
        this.lang = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed on
     * this class.
     * <p>
     * the map is keyed by the name of the attribute and the value is the string
     * value of the attribute. the map returned by this method is live, and you
     * can add new attribute by updating the map directly. Because of this
     * design, there's no setter.
     * 
     * @return always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        if (otherAttributes == null) {
            otherAttributes = new HashMap<QName, String>();
        }
        return otherAttributes;
    }

}
