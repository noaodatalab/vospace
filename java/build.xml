<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<project name="VOSpace-2.0" default="dist" basedir=".">
	<description>
        Ant build file for VOSpace 2.0
    </description>

	<property name="final.war.name" value="vospace-2.0.war" />
	<property file="build.properties" />


	<!-- set global properties for this build -->
	<property name="build" location="build" />
	<property name="build.classes" location="${build}/classes" />
	<property name="sdk.base" location="${basedir}/../../.." />
	<property name="sdk.lib" location="${basedir}/src/main/lib" />
	<property name="final.war" location="${basedir}/${final.war.name}" />
	<property name="main" location="${basedir}/src/main" />
	<property name="webapp" location="${main}/webapp" />


	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.classes}" />
	</target>


	<target name="compile" depends="init" description="compile the source ">
		<!-- Set classpath for SDK lib -->
		<path id="sdk.classpath">
			<fileset dir="${sdk.lib}" includes="**/*.jar" />
		</path>

		<!-- Compile the java code -->
      <!--<javac srcdir="${main}/java" destdir="${build.classes}" target="1.6" source="1.6">-->
		<javac srcdir="${main}/java" destdir="${build.classes}" target="1.8" source="1.8">
			<classpath refid="sdk.classpath" />
		</javac>
	</target>

	<target name="tom" depends="init" description="compiles and reloads tomcat">
		<!-- Set classpath for SDK lib -->
		<path id="sdk.classpath">
			<fileset dir="${sdk.lib}" includes="**/*.jar" />
		</path>

		<!-- Compile the java code -->
		<!--<javac srcdir="${main}/java" destdir="${build.classes}" target="1.6" source="1.6">-->
		<javac srcdir="${main}/java" destdir="${build.classes}" target="1.8" source="1.8" debug="on">
			<classpath refid="sdk.classpath" />
		</javac>
		<exec executable="curl">
			<arg value="--user"/>
			<arg value="admin:admin"/>
			<arg value="http://localhost:8080/manager/text/reload?path=/vospace"/>
		</exec>
		<!-- We can also touch the web.xml for that app and tomcat will reload it.
		There are a few seconds delay though, hence the curl option -->
		<!--<touch file="${webapp}/WEB-INF/web.xml"/>-->
	</target>


	<target name="dist" depends="compile" description="generate the distribution">
        <!-- Copy the properties file -->
        <exec executable="hostname" outputproperty="computer.hostname">
		<arg line="-s"/>
	</exec>
        <copy file="vospace.properties.${computer.hostname}" tofile="${webapp}/WEB-INF/classes/vospace.properties" overwrite="true"/>

		<!-- Create the war file -->
		<war destfile="${final.war}" webxml="${webapp}/WEB-INF/web.xml">
			<webinf dir="${webapp}/WEB-INF" includes="**/*" />
			<classes dir="${build.classes}" includes="**/*" />
			<lib dir="${sdk.lib}" includes="*.jar" excludes="*servlet*jar" />
			<lib file="${sdk.jar}" />
		</war>
	</target>


        <target name="deploy" depends="compile" description="deploy to Tomcat webapps directory">
                <deploy url="${manager.url}"
                        username="${manager.username}"
                        password="${manager.password}"
                        path="${app.path}"
                        localWar="file://${build.home}"/>
        </target>


	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete file="${final.war}" />
	</target>

</project>
